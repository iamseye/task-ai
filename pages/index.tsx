import Head from 'next/head';
import { Inter } from 'next/font/google';

import Header from '@/components/Header.component';
import GoalInputForm from '@/components/GoalInputForm.component';
import { useState, SyntheticEvent } from 'react';
import TextCard from '@/components/TextCard.component';
import { getMilestonesAndEncouragement } from '@/utils/openAI';
import Quote from '@/components/Quote.component';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [inputGoal, setInputGoal] = useState('');
  const [isLoading, setLoading] = useState(false);
  const [generatedAIResponse, setGeneratedAIResponse] = useState('');
  const [generatedMilestones, setGeneratedMilestones] = useState<string[]>([]);
  const [generatedEncouragement, setGeneratedEncouragement] =
    useState<string>('');

  const onSubmitGenerate = async (event: SyntheticEvent) => {
    event.preventDefault();
    setLoading(true);
    setGeneratedAIResponse('');

    if (inputGoal) {
      const response = await fetch('/api/generateMilestones', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: inputGoal,
        }),
      });

      console.log('edge function return', response);

      if (!response.ok) {
        throw new Error(response.statusText);
      }

      try {
        //readable stream
        const data = response.body;
        if (!data) {
          return;
        }

        const reader = data.getReader();
        const decoder = new TextDecoder();
        let done = false;

        while (!done) {
          const { value, done: doneReading } = await reader.read();
          console.log('client', value);
          done = doneReading;
          const chunkValue = decoder.decode(value);
          setGeneratedAIResponse((prev) => prev + chunkValue);
        }
      } catch (err) {
        console.log('Looks like OpenAI timed out :(', err);
      }

      setLoading(false);
    }
  };

  return (
    <div className="flex max-w-6xl mx-auto flex-col items-center justify-center py-2 min-h-screen">
      <Head>
        <title>Task breakdown</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="flex flex-col align-middle p-24 min-h-screen">
        <div>
          <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">
            Build actionable milestones to achieve your goals
          </h1>
          <GoalInputForm
            isLoading={isLoading}
            setInputGoal={setInputGoal}
            onSubmitGenerate={onSubmitGenerate}
          />

          {!isLoading && (
            <>
              {generatedMilestones.map(
                (milestone, index) =>
                  milestone.length && (
                    <TextCard
                      key={milestone}
                      title={`Milestone ${index + 1}`}
                      text={milestone}
                    />
                  )
              )}

              {generatedEncouragement && (
                <Quote text={generatedEncouragement} />
              )}
            </>
          )}
        </div>
      </main>
    </div>
  );
}
